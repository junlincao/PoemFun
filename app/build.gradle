
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4+'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'


def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.cjl.poetryfan"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion 14
        targetSdkVersion 22
        resConfigs "en", "zh"

        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
//    provided 'com.squareup.dagger:dagger-compiler:1.2.0+'

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.0.0+'
    compile 'com.android.support:palette-v7:22.0.0+'
    compile 'com.android.support:recyclerview-v7:22.0.0+'
    compile 'com.android.support:cardview-v7:22.0.0+'

//    compile 'com.squareup.dagger:dagger:1.2.0+'
    compile 'com.squareup.okhttp:okhttp:2.3.0+'
    compile 'com.squareup:otto:1.3.6+'
    compile 'com.jakewharton:butterknife:6.1.0+'
    compile "com.facebook.fresco:fresco:0.3.0+"
    compile "com.facebook.fresco:imagepipeline-okhttp:0.3.0+"
    compile 'com.google.protobuf:protobuf-java:2.6.1+'


    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0+'
}


File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
